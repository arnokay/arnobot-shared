// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: twitch.webhooks.sql

package db

import (
	"context"
)

const twitchWebhookCreate = `-- name: TwitchWebhookCreate :one
INSERT INTO twitch.webhooks (
  subscription_id,
  subscription_status,
  event,
  callback,
  user_id,
  broadcaster_id,
  bot_id
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7
) RETURNING subscription_id
`

type TwitchWebhookCreateParams struct {
	SubscriptionID     string
	SubscriptionStatus string
	Event              string
	Callback           string
	UserID             int32
	BroadcasterID      string
	BotID              string
}

func (q *Queries) TwitchWebhookCreate(ctx context.Context, arg TwitchWebhookCreateParams) (string, error) {
	row := q.db.QueryRow(ctx, twitchWebhookCreate,
		arg.SubscriptionID,
		arg.SubscriptionStatus,
		arg.Event,
		arg.Callback,
		arg.UserID,
		arg.BroadcasterID,
		arg.BotID,
	)
	var subscription_id string
	err := row.Scan(&subscription_id)
	return subscription_id, err
}

const twitchWebhookUpdateStatus = `-- name: TwitchWebhookUpdateStatus :execrows
UPDATE twitch.webhooks
SET
status = COALESCE($2, status),
subscription_status = COALESCE($3, status),
updated_at = CURRENT_TIMESTAMP
WHERE subscription_id = $1
`

type TwitchWebhookUpdateStatusParams struct {
	SubscriptionID     string
	Status             TwitchWebhookStatus
	SubscriptionStatus string
}

func (q *Queries) TwitchWebhookUpdateStatus(ctx context.Context, arg TwitchWebhookUpdateStatusParams) (int64, error) {
	result, err := q.db.Exec(ctx, twitchWebhookUpdateStatus, arg.SubscriptionID, arg.Status, arg.SubscriptionStatus)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
