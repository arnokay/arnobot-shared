// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: whitelists.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const whitelistCreate = `-- name: WhitelistCreate :one
INSERT INTO public.whitelist (platform, platform_user_id, platform_user_name, platform_user_login, user_id)
    VALUES ($1, $2, $3, $4, $5)
RETURNING
    platform, platform_user_id, platform_user_name, platform_user_login, user_id
`

type WhitelistCreateParams struct {
	Platform          Platform
	PlatformUserID    *string
	PlatformUserName  *string
	PlatformUserLogin *string
	UserID            *uuid.UUID
}

func (q *Queries) WhitelistCreate(ctx context.Context, arg WhitelistCreateParams) (Whitelist, error) {
	row := q.db.QueryRow(ctx, whitelistCreate,
		arg.Platform,
		arg.PlatformUserID,
		arg.PlatformUserName,
		arg.PlatformUserLogin,
		arg.UserID,
	)
	var i Whitelist
	err := row.Scan(
		&i.Platform,
		&i.PlatformUserID,
		&i.PlatformUserName,
		&i.PlatformUserLogin,
		&i.UserID,
	)
	return i, err
}

const whitelistDelete = `-- name: WhitelistDelete :execrows
DELETE FROM public.whitelist
WHERE platform = $1
    AND (($2::varchar(100) IS NULL
            OR platform_user_id = $2)
        AND ($3::varchar(100) IS NULL
            OR platform_user_name = $3)
        AND ($4::varchar(100) IS NULL
            OR platform_user_login = $4)
        AND ($5::uuid IS NULL
            OR user_id = $5))
`

type WhitelistDeleteParams struct {
	Platform          Platform
	PlatformUserID    *string
	PlatformUserName  *string
	PlatformUserLogin *string
	UserID            *uuid.UUID
}

func (q *Queries) WhitelistDelete(ctx context.Context, arg WhitelistDeleteParams) (int64, error) {
	result, err := q.db.Exec(ctx, whitelistDelete,
		arg.Platform,
		arg.PlatformUserID,
		arg.PlatformUserName,
		arg.PlatformUserLogin,
		arg.UserID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const whitelistGetOne = `-- name: WhitelistGetOne :one
SELECT
    platform, platform_user_id, platform_user_name, platform_user_login, user_id
FROM
    public.whitelist
WHERE
    platform = $1
    AND (($2::varchar(100) IS NULL
            OR platform_user_id = $2)
        OR ($3::varchar(100) IS NULL
            OR platform_user_name = $3)
        OR ($4::varchar(100) IS NULL
            OR platform_user_login = $4)
        OR ($5::uuid IS NULL
            OR user_id = $5))
`

type WhitelistGetOneParams struct {
	Platform          Platform
	PlatformUserID    *string
	PlatformUserName  *string
	PlatformUserLogin *string
	UserID            *uuid.UUID
}

func (q *Queries) WhitelistGetOne(ctx context.Context, arg WhitelistGetOneParams) (Whitelist, error) {
	row := q.db.QueryRow(ctx, whitelistGetOne,
		arg.Platform,
		arg.PlatformUserID,
		arg.PlatformUserName,
		arg.PlatformUserLogin,
		arg.UserID,
	)
	var i Whitelist
	err := row.Scan(
		&i.Platform,
		&i.PlatformUserID,
		&i.PlatformUserName,
		&i.PlatformUserLogin,
		&i.UserID,
	)
	return i, err
}
