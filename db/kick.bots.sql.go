// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: kick.bots.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const kickBotCreate = `-- name: KickBotCreate :one
INSERT INTO kick.bots (user_id, broadcaster_id, bot_id)
    VALUES ($1, $2, $3)
RETURNING
    user_id, broadcaster_id, bot_id
`

type KickBotCreateParams struct {
	UserID        uuid.UUID
	BroadcasterID int32
	BotID         int32
}

func (q *Queries) KickBotCreate(ctx context.Context, arg KickBotCreateParams) (KickBot, error) {
	row := q.db.QueryRow(ctx, kickBotCreate, arg.UserID, arg.BroadcasterID, arg.BotID)
	var i KickBot
	err := row.Scan(&i.UserID, &i.BroadcasterID, &i.BotID)
	return i, err
}

const kickBotDelete = `-- name: KickBotDelete :execrows
DELETE FROM kick.bots
WHERE user_id = $1
`

func (q *Queries) KickBotDelete(ctx context.Context, userID uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, kickBotDelete, userID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const kickBotGet = `-- name: KickBotGet :one
SELECT
    user_id, broadcaster_id, bot_id
FROM
    kick.bots
WHERE
    user_id = $1
    AND bot_id = $2
`

type KickBotGetParams struct {
	UserID uuid.UUID
	BotID  int32
}

func (q *Queries) KickBotGet(ctx context.Context, arg KickBotGetParams) (KickBot, error) {
	row := q.db.QueryRow(ctx, kickBotGet, arg.UserID, arg.BotID)
	var i KickBot
	err := row.Scan(&i.UserID, &i.BroadcasterID, &i.BotID)
	return i, err
}

const kickBotsGet = `-- name: KickBotsGet :many
SELECT
    user_id, broadcaster_id, bot_id
FROM
    kick.bots
WHERE ($1::uuid IS NULL
    OR user_id = $1)
AND ($2::int IS NULL
    OR broadcaster_id = $2)
AND ($3::int IS NULL
    OR bot_id = $3)
`

type KickBotsGetParams struct {
	UserID        *uuid.UUID
	BroadcasterID *int32
	BotID         *int32
}

func (q *Queries) KickBotsGet(ctx context.Context, arg KickBotsGetParams) ([]KickBot, error) {
	rows, err := q.db.Query(ctx, kickBotsGet, arg.UserID, arg.BroadcasterID, arg.BotID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []KickBot
	for rows.Next() {
		var i KickBot
		if err := rows.Scan(&i.UserID, &i.BroadcasterID, &i.BotID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
