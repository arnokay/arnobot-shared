// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"

	"github.com/google/uuid"
)

type Querier interface {
	AuthProviderCreate(ctx context.Context, arg AuthProviderCreateParams) (int32, error)
	AuthProviderGet(ctx context.Context, arg AuthProviderGetParams) (AuthProvider, error)
	AuthProviderGetByProviderUserId(ctx context.Context, arg AuthProviderGetByProviderUserIdParams) (AuthProvider, error)
	AuthProviderGetByUserId(ctx context.Context, arg AuthProviderGetByUserIdParams) (AuthProvider, error)
	// refresh_token = COALESCE($2, refresh_token),
	AuthProviderUpdateTokens(ctx context.Context, arg AuthProviderUpdateTokensParams) (int64, error)
	AuthSessionActiveCount(ctx context.Context, userID uuid.UUID) (int64, error)
	AuthSessionActiveGet(ctx context.Context, userID uuid.UUID) ([]AuthSession, error)
	AuthSessionCreate(ctx context.Context, userID uuid.UUID) (AuthSession, error)
	AuthSessionDelete(ctx context.Context, token string) (AuthSession, error)
	AuthSessionGet(ctx context.Context, token string) (AuthSession, error)
	AuthSessionGetOwner(ctx context.Context, token string) (AuthSessionGetOwnerRow, error)
	AuthSessionOldDeactivate(ctx context.Context, arg AuthSessionOldDeactivateParams) error
	AuthSessionValidate(ctx context.Context, token string) (AuthSessionStatus, error)
	KickBotCreate(ctx context.Context, arg KickBotCreateParams) (KickBot, error)
	KickBotDelete(ctx context.Context, userID uuid.UUID) (int64, error)
	KickBotGet(ctx context.Context, arg KickBotGetParams) (KickBot, error)
	KickBotsGet(ctx context.Context, arg KickBotsGetParams) ([]KickBot, error)
	KickDefaultBotGet(ctx context.Context) (KickDefaultBot, error)
	KickDefaultBotUpdate(ctx context.Context, botID int32) (int64, error)
	KickDefaultBroadcasterGet(ctx context.Context) (int32, error)
	KickDefaultBroadcasterUpdate(ctx context.Context, broadcasterID int32) (int64, error)
	KickSelectedBotChange(ctx context.Context, arg KickSelectedBotChangeParams) (KickSelectedBot, error)
	KickSelectedBotGetByBroadcasterID(ctx context.Context, broadcasterID int32) (KickSelectedBot, error)
	KickSelectedBotGetByUserID(ctx context.Context, userID uuid.UUID) (KickSelectedBot, error)
	KickSelectedBotStatusChange(ctx context.Context, arg KickSelectedBotStatusChangeParams) (TwitchSelectedBot, error)
	TwitchBotCreate(ctx context.Context, arg TwitchBotCreateParams) (TwitchBot, error)
	TwitchBotDelete(ctx context.Context, userID uuid.UUID) (int64, error)
	TwitchBotGet(ctx context.Context, arg TwitchBotGetParams) (TwitchBot, error)
	TwitchBotsGet(ctx context.Context, arg TwitchBotsGetParams) ([]TwitchBot, error)
	TwitchDefaultBotGet(ctx context.Context) (TwitchDefaultBot, error)
	TwitchDefaultBotUpdate(ctx context.Context, botID string) (int64, error)
	TwitchDefaultBroadcasterGet(ctx context.Context) (string, error)
	TwitchDefaultBroadcasterUpdate(ctx context.Context, broadcasterID string) (string, error)
	TwitchSelectedBotChange(ctx context.Context, arg TwitchSelectedBotChangeParams) (TwitchSelectedBot, error)
	TwitchSelectedBotGetByBroadcasterID(ctx context.Context, broadcasterID string) (TwitchSelectedBot, error)
	TwitchSelectedBotGetByUserID(ctx context.Context, userID uuid.UUID) (TwitchSelectedBot, error)
	TwitchSelectedBotStatusChange(ctx context.Context, arg TwitchSelectedBotStatusChangeParams) (TwitchSelectedBot, error)
	UserCreate(ctx context.Context, username string) (uuid.UUID, error)
	UserDelete(ctx context.Context, id uuid.UUID) (int64, error)
	UserGetById(ctx context.Context, id uuid.UUID) (User, error)
	UserUpdate(ctx context.Context, arg UserUpdateParams) (int64, error)
	WhitelistCreate(ctx context.Context, arg WhitelistCreateParams) (Whitelist, error)
	WhitelistDelete(ctx context.Context, arg WhitelistDeleteParams) (int64, error)
	WhitelistGetOne(ctx context.Context, arg WhitelistGetOneParams) (Whitelist, error)
	WhitelistUpdate(ctx context.Context, arg WhitelistUpdateParams) (Whitelist, error)
}

var _ Querier = (*Queries)(nil)
