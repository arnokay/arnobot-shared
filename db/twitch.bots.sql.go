// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: twitch.bots.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const twitchBotCreate = `-- name: TwitchBotCreate :one
INSERT INTO twitch.bots (
  user_id,
  broadcaster_id,
  bot_id
) VALUES (
  $1,
  $2,
  $3
) RETURNING user_id, broadcaster_id, bot_id, role
`

type TwitchBotCreateParams struct {
	UserID        uuid.UUID
	BroadcasterID string
	BotID         string
}

func (q *Queries) TwitchBotCreate(ctx context.Context, arg TwitchBotCreateParams) (TwitchBot, error) {
	row := q.db.QueryRow(ctx, twitchBotCreate, arg.UserID, arg.BroadcasterID, arg.BotID)
	var i TwitchBot
	err := row.Scan(
		&i.UserID,
		&i.BroadcasterID,
		&i.BotID,
		&i.Role,
	)
	return i, err
}

const twitchBotDelete = `-- name: TwitchBotDelete :execrows
DELETE FROM twitch.bots
WHERE user_id = $1
`

func (q *Queries) TwitchBotDelete(ctx context.Context, userID uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, twitchBotDelete, userID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const twitchBotGet = `-- name: TwitchBotGet :one
SELECT user_id, broadcaster_id, bot_id, role
FROM twitch.bots
WHERE
user_id = $1 AND bot_id = $2
`

type TwitchBotGetParams struct {
	UserID uuid.UUID
	BotID  string
}

func (q *Queries) TwitchBotGet(ctx context.Context, arg TwitchBotGetParams) (TwitchBot, error) {
	row := q.db.QueryRow(ctx, twitchBotGet, arg.UserID, arg.BotID)
	var i TwitchBot
	err := row.Scan(
		&i.UserID,
		&i.BroadcasterID,
		&i.BotID,
		&i.Role,
	)
	return i, err
}

const twitchBotsGet = `-- name: TwitchBotsGet :many
SELECT user_id, broadcaster_id, bot_id, role
FROM twitch.bots
WHERE 
($1::uuid IS NULL OR user_id = $1) AND
($2::varchar(100) IS NULL OR broadcaster_id = $2) AND
($3::varchar(100) IS NULL OR bot_id = $3)
`

type TwitchBotsGetParams struct {
	UserID        *uuid.UUID
	BroadcasterID *string
	BotID         *string
}

func (q *Queries) TwitchBotsGet(ctx context.Context, arg TwitchBotsGetParams) ([]TwitchBot, error) {
	rows, err := q.db.Query(ctx, twitchBotsGet, arg.UserID, arg.BroadcasterID, arg.BotID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TwitchBot
	for rows.Next() {
		var i TwitchBot
		if err := rows.Scan(
			&i.UserID,
			&i.BroadcasterID,
			&i.BotID,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
