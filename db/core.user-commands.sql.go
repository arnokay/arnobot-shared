// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: core.user-commands.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const coreUserCommandCreate = `-- name: CoreUserCommandCreate :one
INSERT INTO core.user_commands (user_id, name, text, reply)
    VALUES ($1, $2, $3, $4)
RETURNING
    user_id, name, text, reply
`

type CoreUserCommandCreateParams struct {
	UserID uuid.UUID
	Name   string
	Text   string
	Reply  bool
}

func (q *Queries) CoreUserCommandCreate(ctx context.Context, arg CoreUserCommandCreateParams) (CoreUserCommand, error) {
	row := q.db.QueryRow(ctx, coreUserCommandCreate,
		arg.UserID,
		arg.Name,
		arg.Text,
		arg.Reply,
	)
	var i CoreUserCommand
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Text,
		&i.Reply,
	)
	return i, err
}

const coreUserCommandDelete = `-- name: CoreUserCommandDelete :one
DELETE FROM core.user_commands
WHERE user_id = $1
    AND name = $2
RETURNING
    user_id, name, text, reply
`

type CoreUserCommandDeleteParams struct {
	UserID uuid.UUID
	Name   string
}

func (q *Queries) CoreUserCommandDelete(ctx context.Context, arg CoreUserCommandDeleteParams) (CoreUserCommand, error) {
	row := q.db.QueryRow(ctx, coreUserCommandDelete, arg.UserID, arg.Name)
	var i CoreUserCommand
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Text,
		&i.Reply,
	)
	return i, err
}

const coreUserCommandGetByUserID = `-- name: CoreUserCommandGetByUserID :many
SELECT
    user_id, name, text, reply
FROM
    core.user_commands
WHERE
    user_id = $1
`

func (q *Queries) CoreUserCommandGetByUserID(ctx context.Context, userID uuid.UUID) ([]CoreUserCommand, error) {
	rows, err := q.db.Query(ctx, coreUserCommandGetByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CoreUserCommand
	for rows.Next() {
		var i CoreUserCommand
		if err := rows.Scan(
			&i.UserID,
			&i.Name,
			&i.Text,
			&i.Reply,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const coreUserCommandGetOne = `-- name: CoreUserCommandGetOne :one
SELECT
    user_id, name, text, reply
FROM
    core.user_commands
WHERE
    user_id = $1
    AND name = $2
`

type CoreUserCommandGetOneParams struct {
	UserID uuid.UUID
	Name   string
}

func (q *Queries) CoreUserCommandGetOne(ctx context.Context, arg CoreUserCommandGetOneParams) (CoreUserCommand, error) {
	row := q.db.QueryRow(ctx, coreUserCommandGetOne, arg.UserID, arg.Name)
	var i CoreUserCommand
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Text,
		&i.Reply,
	)
	return i, err
}

const coreUserCommandUpdate = `-- name: CoreUserCommandUpdate :one
UPDATE
    core.user_commands
SET
    name = COALESCE($3::uuid, name),
    text = COALESCE($4::text, text),
    reply = COALESCE($5::bool, reply)
WHERE
    user_id = $1
    AND name = $2
RETURNING
    user_id, name, text, reply
`

type CoreUserCommandUpdateParams struct {
	UserID  uuid.UUID
	Name    string
	NewName *uuid.UUID
	Text    *string
	Reply   *bool
}

func (q *Queries) CoreUserCommandUpdate(ctx context.Context, arg CoreUserCommandUpdateParams) (CoreUserCommand, error) {
	row := q.db.QueryRow(ctx, coreUserCommandUpdate,
		arg.UserID,
		arg.Name,
		arg.NewName,
		arg.Text,
		arg.Reply,
	)
	var i CoreUserCommand
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Text,
		&i.Reply,
	)
	return i, err
}
