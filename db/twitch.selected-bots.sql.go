// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: twitch.selected-bots.sql

package db

import (
	"context"
)

const twitchSelectedBotCreateOrUpdate = `-- name: TwitchSelectedBotCreateOrUpdate :one
INSERT INTO twitch.selected_bots (user_id, twitch_user_id)
VALUES ($1, $2)
ON CONFLICT (user_id) DO UPDATE
  SET 
  twitch_user_id = $2,
  updated_at = CURRENT_TIMESTAMP
RETURNING user_id
`

type TwitchSelectedBotCreateOrUpdateParams struct {
	UserID       int32
	TwitchUserID string
}

func (q *Queries) TwitchSelectedBotCreateOrUpdate(ctx context.Context, arg TwitchSelectedBotCreateOrUpdateParams) (int32, error) {
	row := q.db.QueryRow(ctx, twitchSelectedBotCreateOrUpdate, arg.UserID, arg.TwitchUserID)
	var user_id int32
	err := row.Scan(&user_id)
	return user_id, err
}

const twitchSelectedBotGet = `-- name: TwitchSelectedBotGet :one
SELECT user_id, twitch_user_id, created_at, updated_at
FROM twitch.selected_bots
WHERE user_id = $1
`

func (q *Queries) TwitchSelectedBotGet(ctx context.Context, userID int32) (TwitchSelectedBot, error) {
	row := q.db.QueryRow(ctx, twitchSelectedBotGet, userID)
	var i TwitchSelectedBot
	err := row.Scan(
		&i.UserID,
		&i.TwitchUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
