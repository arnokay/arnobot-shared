// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: twitch.users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const twitchUserConnectProvider = `-- name: TwitchUserConnectProvider :execrows
UPDATE twitch.users
SET
auth_provider_id = $1
WHERE id = $2
`

type TwitchUserConnectProviderParams struct {
	AuthProviderID *int32 `db:"auth_provider_id"`
	ID             string `db:"id"`
}

func (q *Queries) TwitchUserConnectProvider(ctx context.Context, arg TwitchUserConnectProviderParams) (int64, error) {
	result, err := q.db.Exec(ctx, twitchUserConnectProvider, arg.AuthProviderID, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const twitchUserCreate = `-- name: TwitchUserCreate :one
INSERT INTO twitch.users (
id,
username,
display_name,
type,
broadcaster_type,
profile_image_url,
created_at
) VALUES (
$1,
$2,
$3,
$4,
$5,
$6,
$7
) RETURNING id
`

type TwitchUserCreateParams struct {
	ID              string           `db:"id"`
	Username        string           `db:"username"`
	DisplayName     string           `db:"display_name"`
	Type            string           `db:"type"`
	BroadcasterType string           `db:"broadcaster_type"`
	ProfileImageUrl string           `db:"profile_image_url"`
	CreatedAt       pgtype.Timestamp `db:"created_at"`
}

func (q *Queries) TwitchUserCreate(ctx context.Context, arg TwitchUserCreateParams) (string, error) {
	row := q.db.QueryRow(ctx, twitchUserCreate,
		arg.ID,
		arg.Username,
		arg.DisplayName,
		arg.Type,
		arg.BroadcasterType,
		arg.ProfileImageUrl,
		arg.CreatedAt,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}
