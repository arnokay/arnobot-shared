// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: kick.selected-bots.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const kickSelectedBotChange = `-- name: KickSelectedBotChange :one
INSERT INTO kick.selected_bots (user_id, bot_id, broadcaster_id)
VALUES ($1, $2, $3)
ON CONFLICT (user_id) DO UPDATE
  SET 
  bot_id = $2,
  broadcaster_id = $3,
  updated_at = CURRENT_TIMESTAMP
  RETURNING user_id, broadcaster_id, bot_id, updated_at
`

type KickSelectedBotChangeParams struct {
	UserID        uuid.UUID
	BotID         int32
	BroadcasterID int32
}

func (q *Queries) KickSelectedBotChange(ctx context.Context, arg KickSelectedBotChangeParams) (KickSelectedBot, error) {
	row := q.db.QueryRow(ctx, kickSelectedBotChange, arg.UserID, arg.BotID, arg.BroadcasterID)
	var i KickSelectedBot
	err := row.Scan(
		&i.UserID,
		&i.BroadcasterID,
		&i.BotID,
		&i.UpdatedAt,
	)
	return i, err
}

const kickSelectedBotGetByBroadcasterID = `-- name: KickSelectedBotGetByBroadcasterID :one
SELECT user_id, broadcaster_id, bot_id, updated_at
FROM kick.selected_bots
WHERE broadcaster_id = $1
`

func (q *Queries) KickSelectedBotGetByBroadcasterID(ctx context.Context, broadcasterID int32) (KickSelectedBot, error) {
	row := q.db.QueryRow(ctx, kickSelectedBotGetByBroadcasterID, broadcasterID)
	var i KickSelectedBot
	err := row.Scan(
		&i.UserID,
		&i.BroadcasterID,
		&i.BotID,
		&i.UpdatedAt,
	)
	return i, err
}

const kickSelectedBotGetByUserID = `-- name: KickSelectedBotGetByUserID :one
SELECT user_id, broadcaster_id, bot_id, updated_at
FROM kick.selected_bots
WHERE user_id = $1
`

func (q *Queries) KickSelectedBotGetByUserID(ctx context.Context, userID uuid.UUID) (KickSelectedBot, error) {
	row := q.db.QueryRow(ctx, kickSelectedBotGetByUserID, userID)
	var i KickSelectedBot
	err := row.Scan(
		&i.UserID,
		&i.BroadcasterID,
		&i.BotID,
		&i.UpdatedAt,
	)
	return i, err
}
