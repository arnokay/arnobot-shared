// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/arnokay/arnobot-shared/platform"
	"github.com/google/uuid"
)

type AuthSessionStatus string

const (
	AuthSessionStatusActive   AuthSessionStatus = "active"
	AuthSessionStatusDisabled AuthSessionStatus = "disabled"
)

func (e *AuthSessionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AuthSessionStatus(s)
	case string:
		*e = AuthSessionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for AuthSessionStatus: %T", src)
	}
	return nil
}

type NullAuthSessionStatus struct {
	AuthSessionStatus AuthSessionStatus
	Valid             bool // Valid is true if AuthSessionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAuthSessionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.AuthSessionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AuthSessionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAuthSessionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AuthSessionStatus), nil
}

type Platform string

const (
	PlatformTwitch Platform = "twitch"
	PlatformKick   Platform = "kick"
)

func (e *Platform) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Platform(s)
	case string:
		*e = Platform(s)
	default:
		return fmt.Errorf("unsupported scan type for Platform: %T", src)
	}
	return nil
}

type NullPlatform struct {
	Platform Platform
	Valid    bool // Valid is true if Platform is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPlatform) Scan(value interface{}) error {
	if value == nil {
		ns.Platform, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Platform.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPlatform) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Platform), nil
}

type UserStatus string

const (
	UserStatusActive      UserStatus = "active"
	UserStatusBanned      UserStatus = "banned"
	UserStatusDeactivated UserStatus = "deactivated"
	UserStatusDeleted     UserStatus = "deleted"
)

func (e *UserStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserStatus(s)
	case string:
		*e = UserStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UserStatus: %T", src)
	}
	return nil
}

type NullUserStatus struct {
	UserStatus UserStatus
	Valid      bool // Valid is true if UserStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserStatus) Scan(value interface{}) error {
	if value == nil {
		ns.UserStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserStatus), nil
}

type AuthProvider struct {
	ID             int32
	UserID         uuid.UUID
	Provider       string
	ProviderUserID string
	AccessToken    string
	RefreshToken   string
	AccessType     string
	Scopes         []string
	CreatedAt      time.Time
	UpdatedAt      time.Time
}

type AuthSession struct {
	Token      string
	Status     AuthSessionStatus
	UserID     uuid.UUID
	CreatedAt  time.Time
	LastUsedAt time.Time
}

type Blacklist struct {
	Platform          platform.Platform
	PlatformUserID    *string
	PlatformUserName  *string
	PlatformUserLogin *string
	UserID            *uuid.UUID
}

type CoreChatterGroup struct {
	ID     int32
	UserID uuid.UUID
	Name   string
}

type CoreFirstTimeMessage struct {
	Platform         platform.Platform
	ChatterID        string
	ChatterName      string
	ChatterLogin     string
	BroadcasterID    string
	BroadcasterName  string
	BroadcasterLogin string
	UserID           *uuid.UUID
	Message          string
	CreatedAt        time.Time
}

type CoreGroupChatter struct {
	GroupID      int32
	Platform     platform.Platform
	ChatterID    string
	ChatterName  string
	ChatterLogin string
}

type CoreUserCommand struct {
	UserID    uuid.UUID
	Name      string
	Text      string
	Reply     bool
	CreatedAt time.Time
	UpdatedAt time.Time
}

type CoreUserCounter struct {
	UserID uuid.UUID
	Name   string
	Text   string
	Count  int32
}

type CoreUserPrefix struct {
	UserID uuid.UUID
	Prefix string
}

type CoreUserScheduledMessage struct {
	ID        int32
	UserID    uuid.UUID
	Text      string
	Cooldown  int64
	Platforms []platform.Platform
	CreatedAt time.Time
	UpdatedAt time.Time
}

type KickBot struct {
	UserID        uuid.UUID
	BroadcasterID int32
	BotID         int32
}

type KickDefaultBot struct {
	Main  bool
	BotID int32
}

type KickDefaultBroadcaster struct {
	Main          bool
	BroadcasterID int32
}

type KickSelectedBot struct {
	UserID        uuid.UUID
	BroadcasterID int32
	BotID         int32
	UpdatedAt     time.Time
	Enabled       bool
}

type TwitchBot struct {
	UserID        uuid.UUID
	BroadcasterID string
	BotID         string
}

type TwitchDefaultBot struct {
	Main  bool
	BotID string
}

type TwitchDefaultBroadcaster struct {
	Main          bool
	BroadcasterID string
}

type TwitchSelectedBot struct {
	UserID        uuid.UUID
	BroadcasterID string
	BotID         string
	UpdatedAt     time.Time
	Enabled       bool
}

type User struct {
	ID        uuid.UUID
	Username  string
	Status    UserStatus
	CreatedAt time.Time
	UpdatedAt time.Time
}

type UserPlatformAccount struct {
	Platform          platform.Platform
	PlatformUserID    string
	PlatformUserName  string
	PlatformUserLogin string
	UserID            uuid.UUID
}

type Whitelist struct {
	Platform          platform.Platform
	PlatformUserID    *string
	PlatformUserName  *string
	PlatformUserLogin *string
	UserID            *uuid.UUID
	ID                int32
}
