// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

type AuthSessionStatus string

const (
	AuthSessionStatusActive   AuthSessionStatus = "active"
	AuthSessionStatusDisabled AuthSessionStatus = "disabled"
)

func (e *AuthSessionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AuthSessionStatus(s)
	case string:
		*e = AuthSessionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for AuthSessionStatus: %T", src)
	}
	return nil
}

type NullAuthSessionStatus struct {
	AuthSessionStatus AuthSessionStatus
	Valid             bool // Valid is true if AuthSessionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAuthSessionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.AuthSessionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AuthSessionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAuthSessionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AuthSessionStatus), nil
}

type TwitchBotRole string

const (
	TwitchBotRoleUser        TwitchBotRole = "user"
	TwitchBotRoleVip         TwitchBotRole = "vip"
	TwitchBotRoleModerator   TwitchBotRole = "moderator"
	TwitchBotRoleBroadcaster TwitchBotRole = "broadcaster"
)

func (e *TwitchBotRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TwitchBotRole(s)
	case string:
		*e = TwitchBotRole(s)
	default:
		return fmt.Errorf("unsupported scan type for TwitchBotRole: %T", src)
	}
	return nil
}

type NullTwitchBotRole struct {
	TwitchBotRole TwitchBotRole
	Valid         bool // Valid is true if TwitchBotRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTwitchBotRole) Scan(value interface{}) error {
	if value == nil {
		ns.TwitchBotRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TwitchBotRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTwitchBotRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TwitchBotRole), nil
}

type TwitchWebhookStatus string

const (
	TwitchWebhookStatusActive      TwitchWebhookStatus = "active"
	TwitchWebhookStatusDeactivated TwitchWebhookStatus = "deactivated"
)

func (e *TwitchWebhookStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TwitchWebhookStatus(s)
	case string:
		*e = TwitchWebhookStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TwitchWebhookStatus: %T", src)
	}
	return nil
}

type NullTwitchWebhookStatus struct {
	TwitchWebhookStatus TwitchWebhookStatus
	Valid               bool // Valid is true if TwitchWebhookStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTwitchWebhookStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TwitchWebhookStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TwitchWebhookStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTwitchWebhookStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TwitchWebhookStatus), nil
}

type UserStatus string

const (
	UserStatusActive      UserStatus = "active"
	UserStatusBanned      UserStatus = "banned"
	UserStatusDeactivated UserStatus = "deactivated"
	UserStatusDeleted     UserStatus = "deleted"
)

func (e *UserStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserStatus(s)
	case string:
		*e = UserStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UserStatus: %T", src)
	}
	return nil
}

type NullUserStatus struct {
	UserStatus UserStatus
	Valid      bool // Valid is true if UserStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserStatus) Scan(value interface{}) error {
	if value == nil {
		ns.UserStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserStatus), nil
}

type AuthProvider struct {
	ID             int32
	UserID         string
	Provider       string
	ProviderUserID string
	AccessToken    string
	RefreshToken   string
	AccessType     string
	Scopes         []string
	CreatedAt      time.Time
	UpdatedAt      time.Time
}

type AuthSession struct {
	Token      string
	Status     AuthSessionStatus
	UserID     string
	CreatedAt  time.Time
	LastUsedAt time.Time
}

type CoreChatterGroup struct {
	ID     int32
	UserID string
	Name   string
}

type CoreFirstTimeMessage struct {
	Platform         string
	ChatterID        string
	ChatterName      string
	ChatterLogin     string
	BroadcasterID    string
	BroadcasterName  string
	BroadcasterLogin string
	UserID           pgtype.UUID
	Message          string
	CreatedAt        time.Time
}

type CoreGroupChatter struct {
	GroupID      int32
	Platform     string
	ChatterID    string
	ChatterName  string
	ChatterLogin string
}

type CoreUserCommand struct {
	UserID string
	Name   string
	Text   string
	Reply  bool
}

type CoreUserCounter struct {
	UserID string
	Name   string
	Text   string
	Count  int32
}

type CoreUserPrefix struct {
	UserID string
	Prefix string
}

type SupportedPlatform struct {
	Platform string
}

type TwitchBot struct {
	UserID        string
	BroadcasterID string
	BotID         string
	Role          TwitchBotRole
}

type TwitchDefaultBot struct {
	Main  bool
	BotID string
}

type TwitchDefaultBroadcaster struct {
	Main         bool
	TwitchUserID string
}

type TwitchSelectedBot struct {
	UserID        string
	BroadcasterID string
	BotID         string
	UpdatedAt     time.Time
}

type User struct {
	ID        string
	Username  string
	Status    UserStatus
	CreatedAt time.Time
	UpdatedAt time.Time
}

type UserPlatformAccount struct {
	Platform          string
	PlatformUserID    string
	PlatformUserName  string
	PlatformUserLogin string
	UserID            string
}
