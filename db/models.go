// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type AuthSessionStatus string

const (
	AuthSessionStatusActive   AuthSessionStatus = "active"
	AuthSessionStatusDisabled AuthSessionStatus = "disabled"
)

func (e *AuthSessionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AuthSessionStatus(s)
	case string:
		*e = AuthSessionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for AuthSessionStatus: %T", src)
	}
	return nil
}

type NullAuthSessionStatus struct {
	AuthSessionStatus AuthSessionStatus
	Valid             bool // Valid is true if AuthSessionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAuthSessionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.AuthSessionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AuthSessionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAuthSessionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AuthSessionStatus), nil
}

type TwitchBotRole string

const (
	TwitchBotRoleUser        TwitchBotRole = "user"
	TwitchBotRoleVip         TwitchBotRole = "vip"
	TwitchBotRoleModerator   TwitchBotRole = "moderator"
	TwitchBotRoleBroadcaster TwitchBotRole = "broadcaster"
)

func (e *TwitchBotRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TwitchBotRole(s)
	case string:
		*e = TwitchBotRole(s)
	default:
		return fmt.Errorf("unsupported scan type for TwitchBotRole: %T", src)
	}
	return nil
}

type NullTwitchBotRole struct {
	TwitchBotRole TwitchBotRole
	Valid         bool // Valid is true if TwitchBotRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTwitchBotRole) Scan(value interface{}) error {
	if value == nil {
		ns.TwitchBotRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TwitchBotRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTwitchBotRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TwitchBotRole), nil
}

type UserStatus string

const (
	UserStatusACTIVE      UserStatus = "ACTIVE"
	UserStatusBANNED      UserStatus = "BANNED"
	UserStatusDEACTIVATED UserStatus = "DEACTIVATED"
	UserStatusDELETED     UserStatus = "DELETED"
)

func (e *UserStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserStatus(s)
	case string:
		*e = UserStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UserStatus: %T", src)
	}
	return nil
}

type NullUserStatus struct {
	UserStatus UserStatus
	Valid      bool // Valid is true if UserStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserStatus) Scan(value interface{}) error {
	if value == nil {
		ns.UserStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserStatus), nil
}

type AuthProvider struct {
	ID             int32            `db:"id"`
	UserID         int32            `db:"user_id"`
	Provider       string           `db:"provider"`
	ProviderUserID string           `db:"provider_user_id"`
	AccessToken    string           `db:"access_token"`
	RefreshToken   string           `db:"refresh_token"`
	AccessType     string           `db:"access_type"`
	CreatedAt      pgtype.Timestamp `db:"created_at"`
	UpdatedAt      pgtype.Timestamp `db:"updated_at"`
	Scopes         []string         `db:"scopes"`
}

type AuthSession struct {
	Status     AuthSessionStatus `db:"status"`
	Token      string            `db:"token"`
	UserID     int32             `db:"user_id"`
	CreatedAt  pgtype.Timestamp  `db:"created_at"`
	LastUsedAt pgtype.Timestamp  `db:"last_used_at"`
}

type TwitchBot struct {
	UserID       int32         `db:"user_id"`
	TwitchUserID string        `db:"twitch_user_id"`
	Role         TwitchBotRole `db:"role"`
}

type TwitchDefaultBot struct {
	Main         bool   `db:"main"`
	TwitchUserID string `db:"twitch_user_id"`
}

type TwitchDefaultBroadcaster struct {
	Main         bool   `db:"main"`
	TwitchUserID string `db:"twitch_user_id"`
}

type TwitchUser struct {
	ID              string           `db:"id"`
	Username        string           `db:"username"`
	DisplayName     string           `db:"display_name"`
	Type            string           `db:"type"`
	BroadcasterType string           `db:"broadcaster_type"`
	ProfileImageUrl string           `db:"profile_image_url"`
	CreatedAt       pgtype.Timestamp `db:"created_at"`
	AuthProviderID  *int32           `db:"auth_provider_id"`
}

type TwitchWebhook struct {
	Event         string           `db:"event"`
	Secret        string           `db:"secret"`
	Callback      string           `db:"callback"`
	UserID        int32            `db:"user_id"`
	BroadcasterID string           `db:"broadcaster_id"`
	BotID         string           `db:"bot_id"`
	CreatedAt     pgtype.Timestamp `db:"created_at"`
	UpdatedAt     pgtype.Timestamp `db:"updated_at"`
}

type User struct {
	ID        int32            `db:"id"`
	Username  string           `db:"username"`
	Status    UserStatus       `db:"status"`
	CreatedAt pgtype.Timestamp `db:"created_at"`
	UpdatedAt pgtype.Timestamp `db:"updated_at"`
}
