// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: kick.default-broadcaster.sql

package db

import (
	"context"
)

const kickDefaultBroadcasterGet = `-- name: KickDefaultBroadcasterGet :one
SELECT
    broadcaster_id
FROM
    kick.default_broadcaster
WHERE
    main = TRUE
`

func (q *Queries) KickDefaultBroadcasterGet(ctx context.Context) (string, error) {
	row := q.db.QueryRow(ctx, kickDefaultBroadcasterGet)
	var broadcaster_id string
	err := row.Scan(&broadcaster_id)
	return broadcaster_id, err
}

const kickDefaultBroadcasterUpdate = `-- name: KickDefaultBroadcasterUpdate :execrows
INSERT INTO kick.default_broadcaster (main, broadcaster_id)
    VALUES (TRUE, $1)
ON CONFLICT (main)
    DO UPDATE SET
        broadcaster_id = $1
    RETURNING
        broadcaster_id
`

func (q *Queries) KickDefaultBroadcasterUpdate(ctx context.Context, broadcasterID string) (int64, error) {
	result, err := q.db.Exec(ctx, kickDefaultBroadcasterUpdate, broadcasterID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
