// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: auth.session.sql

package db

import (
	"context"
)

const authSessionActiveCount = `-- name: AuthSessionActiveCount :one
SELECT count(token)
FROM auth.sessions
WHERE user_id = $1
`

func (q *Queries) AuthSessionActiveCount(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRow(ctx, authSessionActiveCount, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const authSessionActiveGet = `-- name: AuthSessionActiveGet :many
SELECT status, token, user_id, created_at, last_used_at
FROM auth.sessions
WHERE user_id = $1 AND status = 'active'
`

func (q *Queries) AuthSessionActiveGet(ctx context.Context, userID int32) ([]AuthSession, error) {
	rows, err := q.db.Query(ctx, authSessionActiveGet, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AuthSession
	for rows.Next() {
		var i AuthSession
		if err := rows.Scan(
			&i.Status,
			&i.Token,
			&i.UserID,
			&i.CreatedAt,
			&i.LastUsedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const authSessionCreate = `-- name: AuthSessionCreate :one
INSERT INTO auth.sessions (
  user_id
) VALUES (
  $1
) RETURNING status, token, user_id, created_at, last_used_at
`

func (q *Queries) AuthSessionCreate(ctx context.Context, userID int32) (AuthSession, error) {
	row := q.db.QueryRow(ctx, authSessionCreate, userID)
	var i AuthSession
	err := row.Scan(
		&i.Status,
		&i.Token,
		&i.UserID,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const authSessionGet = `-- name: AuthSessionGet :one
SELECT status, token, user_id, created_at, last_used_at
FROM auth.sessions
WHERE token = $1
`

func (q *Queries) AuthSessionGet(ctx context.Context, token string) (AuthSession, error) {
	row := q.db.QueryRow(ctx, authSessionGet, token)
	var i AuthSession
	err := row.Scan(
		&i.Status,
		&i.Token,
		&i.UserID,
		&i.CreatedAt,
		&i.LastUsedAt,
	)
	return i, err
}

const authSessionGetOwner = `-- name: AuthSessionGetOwner :one
SELECT pusers.id, pusers.username, pusers.status, pusers.created_at, pusers.updated_at
FROM auth.sessions
LEFT JOIN public.users as pUsers ON auth.sessions.user_id = public.users.id
WHERE token = $1
`

type AuthSessionGetOwnerRow struct {
	User User
}

func (q *Queries) AuthSessionGetOwner(ctx context.Context, token string) (AuthSessionGetOwnerRow, error) {
	row := q.db.QueryRow(ctx, authSessionGetOwner, token)
	var i AuthSessionGetOwnerRow
	err := row.Scan(
		&i.User.ID,
		&i.User.Username,
		&i.User.Status,
		&i.User.CreatedAt,
		&i.User.UpdatedAt,
	)
	return i, err
}

const authSessionValidate = `-- name: AuthSessionValidate :one
UPDATE auth.sessions
SET
last_seen_at = CURRENT_TIMESTAMP
WHERE token = $1
RETURNING status
`

func (q *Queries) AuthSessionValidate(ctx context.Context, token string) (AuthSessionStatus, error) {
	row := q.db.QueryRow(ctx, authSessionValidate, token)
	var status AuthSessionStatus
	err := row.Scan(&status)
	return status, err
}
