// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
)

const userCreate = `-- name: UserCreate :one
INSERT INTO users DEFAULT VALUES RETURNING id
`

func (q *Queries) UserCreate(ctx context.Context) (int32, error) {
	row := q.db.QueryRow(ctx, userCreate)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const userDelete = `-- name: UserDelete :execrows
DELETE FROM users
WHERE id = $1
`

func (q *Queries) UserDelete(ctx context.Context, id int32) (int64, error) {
	result, err := q.db.Exec(ctx, userDelete, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const userGetById = `-- name: UserGetById :one
SELECT id, username, status, created_at, updated_at 
FROM users
WHERE id = $1
`

func (q *Queries) UserGetById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, userGetById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const userUpdate = `-- name: UserUpdate :execrows
UPDATE users
SET
username = COALESCE($2, username)
WHERE id = $1
`

type UserUpdateParams struct {
	ID       int32   `db:"id"`
	Username *string `db:"username"`
}

func (q *Queries) UserUpdate(ctx context.Context, arg UserUpdateParams) (int64, error) {
	result, err := q.db.Exec(ctx, userUpdate, arg.ID, arg.Username)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
